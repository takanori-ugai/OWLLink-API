<!--
  ~ Copyright (C) 2010, Ulm University
  ~
  ~ Modifications to the initial code base are copyright of their
  ~ respective authors, or their employers as appropriate.  Authorship
  ~ of the modifications may be determined from the ChangeLog placed at
  ~ the end of this file.
  ~
  ~ This library is free software; you can redistribute it and/or
  ~ modify it under the terms of the GNU Lesser General Public
  ~ License as published by the Free Software Foundation; either
  ~ version 2.1 of the License, or (at your option) any later version.
  ~
  ~ This library is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this library; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  -->

<project name="owllink" default="distribution">

    <property name="version" value="1.0.2"/>

    <!-- The directory that contains the jar file dependencies for
         the class path and building a release -->
    <property name="libdir" value="../lib"/>

    <!-- The directory where intermediate build products will be placed -->
    <property name="builddir" value="build"/>

    <!-- A directory into which class files will be placed during the build answer-->
    <property name="classesdir" value="${builddir}/classes"/>

    <!-- The directory where the javadoc will be generated to-->
    <property name="javadocdir" value="${builddir}/javadoc"/>

    <!-- The directory where the scripts can be found -->
    <property name="scripts" value="scripts"/>


    <!-- The name of the jar file which contains the class files-->
    <property name="bin-name" value="owllink-bin.jar"/>

    <!-- The name of the jar file that contains the gathered source files-->
    <property name="src-name" value="owllink-src.jar"/>

    <!-- The name of the jar file that contains the gathered javadoc files-->
    <property name="javadoc-name" value="owllink-javadoc.jar"/>


    <property name="sourcepath" value="src/main/java/**/*.java"/>

    <property name="distdir" value="${builddir}/dist"/>
    <property name="pellet.owlapiv2.server.dir" value="${distdir}/pellet-server-OWLAPI2"/>
    <property name="pellet.owlapiv3.server.dir" value="${distdir}/pellet-server-OWLAPI3"/>
    <property name="factplusplus.owlapiv2.server.dir" value="${distdir}/factplusplus-server-OWLAPI2"/>
    <property name="factplusplus.owlapiv3.server.dir" value="${distdir}/factplusplus-server-OWLAPI3"/>
    <property name="hermit.owlapiv3.server.dir" value="${distdir}/hermit-server"/>



    <!-- For the classpath, we just use all of the libraries in the
  lib directory -->
    <path id="classpath">
        <filelist dir="${libdir}">
            <!--    <include name="*.jar"/>-->
            <file name="org.mortbay.jetty.jar"/>
            <file name="org.mortbay.jmx.jar"/>
            <file name="owlapi-bin.jar"/>
            <file name="owlapi-bin-2.jar"/>
        </filelist>
    </path>


    <!-- Deletes all build products-->
    <target name="clean">
        <delete dir="${builddir}"/>
    </target>

    <!-- Compiles the source into a directory called classes inside
         the build directory -->
    <target name="compile">
        <echo>ant.java.version = ${ant.java.version}</echo>
        <mkdir dir="${classesdir}"/>
        <javac srcdir="./.." destdir="${classesdir}" debug="on" target="1.5">
            <classpath refid="classpath"/>
            <include name="owllinkapi/${sourcepath}"/>
            <include name="owllinkhttpxml/${sourcepath}"/>
            <include name="owllinkimpl/${sourcepath}"/>
            <include name="owllinkserver/${sourcepath}"/>
        </javac>
    </target>

    <!-- Creates a jar containing the OWLlink API binary code -->
    <target name="binjar" depends="compile">
        <jar basedir="${classesdir}" destfile="${builddir}/${bin-name}">
            <manifest>
                <attribute name="Title" value="The OWLlink API"/>
                <attribute name="Built-By" value="${user.name}"/>
            </manifest>
        </jar>
    </target>

    <!-- We just include the documentation for non-implementation stuff
         - including documentation for the impl package wouldn't make sense
         because end API users aren't expected to deal with this kind of thing -->
    <target name="javadoc">
        <mkdir dir="${javadocdir}"/>
        <javadoc destdir="${javadocdir}" verbose="no" windowtitle="The OWLlink API">
            <fileset dir="./.." defaultexcludes="yes">
                <include name="owllinkapi/${sourcepath}"/>
                <include name="owllinkhttpxml/${sourcepath}"/>
            </fileset>
        </javadoc>
        <zip destfile="${builddir}/${javadoc-name}">
            <fileset dir="${javadocdir}"/>
        </zip>
    </target>

    <!-- Creates a jar containing the OWLlink API source code -->
    <target name="srcjar">
        <jar destfile="${builddir}/${src-name}">
            <manifest>
                <attribute name="title" value="The OWLlink API Source Code"/>
                <attribute name="built-by" value="${user.name}"/>
                <attribute name="version" value="${version}"/>

            </manifest>
            <fileset dir="../" includes="**/*.java" excludes="tutorial/**"/>
        </jar>
    </target>

    <!-- Creates a zip file containing the jar file containing the OWLLink API
         class files, a jar file containing the source, a lib directory containing
         the dependencies for the distribution.  The zip file is names
         owllinkapi-${version}.zip -->
    <target name="distribution" depends="clean, binjar, srcjar, javadoc, protegeplugin">
        <mkdir dir="${distdir}"/>
        <copy todir="${distdir}/lib">
            <fileset dir="${libdir}"/>
        </copy>
        <copy todir="${distdir}">
            <!--<fileset dir="./etc">
                <include name="*.*"/>
            </fileset> -->
            <fileset file="${builddir}/${bin-name}"/>
            <fileset file="${builddir}/${src-name}"/>
            <fileset file="${builddir}/${javadoc-name}"/>
            <fileset file="build.xml"/>
            <fileset file="readme.txt"/>
            <fileset file="releasenotes.txt"/>
            <fileset file="changes.txt"/>
            <fileset file="license.txt"/>
            <fileset file="${src-name}"/>
        </copy>
        <antcall target="serverscripts"/>
        <zip destfile="${builddir}/owllinkapi-${version}.zip">
            <fileset dir="${distdir}"/>
        </zip>
    </target>

    <target name="protegeplugin" >

        <property name="owllink-protege4.basedir" value="kacke"/>

        <subant target="compile-plugin">
            <fileset dir="../owllinkprotege/antbuild" includes="build.xml"/>
        </subant>

         <subant target="bundle-plugin">
            <fileset dir="../owllinkprotege/antbuild" includes="build.xml"/>
        </subant>

        <copy todir="${distdir}">
            <fileset file="../owllinkprotege/antbuild/org.semanticweb.owllink.protege.jar"/>
        </copy>

    </target>

    <target name="serverscripts">
        <mkdir dir="${pellet.owlapiv2.server.dir}"/>
        <mkdir dir="${pellet.owlapiv2.server.dir}/lib"/>
        <mkdir dir="${pellet.owlapiv3.server.dir}"/>
        <mkdir dir="${pellet.owlapiv3.server.dir}/lib"/>
        <mkdir dir="${factplusplus.owlapiv2.server.dir}"/>
        <mkdir dir="${factplusplus.owlapiv2.server.dir}/lib32"/>
        <mkdir dir="${factplusplus.owlapiv2.server.dir}/lib64"/>
        <mkdir dir="${factplusplus.owlapiv3.server.dir}"/>
        <mkdir dir="${factplusplus.owlapiv3.server.dir}/lib32"/>
        <mkdir dir="${factplusplus.owlapiv3.server.dir}/lib64"/>
        <mkdir dir="${hermit.owlapiv3.server.dir}/lib"/>

        <copy todir="${distdir}">
            <fileset dir="${basedir}/scripts"/>
        </copy>

        <chmod file="${pellet.owlapiv2.server.dir}/start-pellet.sh" perm="o+rx"/>
        <chmod file="${pellet.owlapiv3.server.dir}/start-pellet.sh" perm="o+rx"/>
        <chmod file="${pellet.owlapiv2.server.dir}/start-pellet.bat" perm="o+rx"/>
        <chmod file="${pellet.owlapiv3.server.dir}/start-pellet.bat" perm="o+rx"/>

        <chmod file="${factplusplus.owlapiv2.server.dir}/start-factplusplus.sh" perm="o+rx"/>
        <chmod file="${factplusplus.owlapiv2.server.dir}/start-factplusplus-32bit.bat" perm="o+rx"/>
        <chmod file="${factplusplus.owlapiv2.server.dir}/start-factplusplus-64bit.bat" perm="o+rx"/>

        <chmod file="${factplusplus.owlapiv3.server.dir}/start-factplusplus.sh" perm="o+rx"/>
        <chmod file="${factplusplus.owlapiv3.server.dir}/start-factplusplus-32bit.sh" perm="o+rx"/>
        <chmod file="${factplusplus.owlapiv3.server.dir}/start-factplusplus-64bit.sh" perm="o+rx"/>

        <chmod file="${hermit.owlapiv3.server.dir}/start-hermit.bat" perm="o+rx"/>
        <chmod file="${hermit.owlapiv3.server.dir}/start-hermit.sh" perm="o+rx"/>
    </target>


</project>